basePath: /v1
definitions:
  models.AuthResponse:
    properties:
      access_token:
        type: string
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      type:
        type: string
      username:
        type: string
    type: object
  models.Category:
    properties:
      created_at:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  models.CreateCategoryRequest:
    properties:
      title:
        maxLength: 100
        type: string
    required:
    - title
    type: object
  models.CreatePostRequest:
    properties:
      category_id:
        type: integer
      description:
        type: string
      image_url:
        type: string
      title:
        type: string
    type: object
  models.CreateUserRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 30
        minLength: 2
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      last_name:
        maxLength: 30
        minLength: 2
        type: string
      password:
        maxLength: 16
        minLength: 6
        type: string
      phone_number:
        type: string
      profile_image_url:
        type: string
      type:
        enum:
        - superadmin
        - user
        type: string
      username:
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - type
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.GetAllUsersResponse:
    properties:
      categories:
        items:
          $ref: '#/definitions/models.User'
        type: array
      count:
        type: integer
    type: object
  models.Post:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      image_url:
        type: string
      like_info:
        $ref: '#/definitions/models.PostLikeInfo'
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
      views_count:
        type: integer
    type: object
  models.PostLikeInfo:
    properties:
      dislikes_count:
        type: integer
      likes_count:
        type: integer
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        maxLength: 30
        minLength: 2
        type: string
      last_name:
        maxLength: 30
        minLength: 2
        type: string
      password:
        maxLength: 16
        minLength: 6
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  models.ResponseOK:
    properties:
      message:
        type: string
    type: object
  models.UpdateUserRequest:
    properties:
      first_name:
        maxLength: 30
        minLength: 2
        type: string
      gender:
        enum:
        - male
        - female
        type: string
      last_name:
        maxLength: 30
        minLength: 2
        type: string
      phone_number:
        type: string
      profile_image_url:
        type: string
      username:
        type: string
    required:
    - first_name
    - last_name
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      first_name:
        type: string
      gender:
        type: string
      id:
        type: integer
      last_name:
        type: string
      phone_number:
        type: string
      profile_image_url:
        type: string
      type:
        type: string
      username:
        type: string
    type: object
  models.VerifyRequest:
    properties:
      code:
        type: string
      email:
        type: string
    required:
    - code
    - email
    type: object
host: localhost:8000
info:
  contact: {}
  description: This is a blog service api.
  title: Swagger for blog api
  version: "1.0"
paths:
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a user
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Register a user
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Verify user
      parameters:
      - description: Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.VerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AuthResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Verify user
      tags:
      - auth
  /categories:
    post:
      consumes:
      - application/json
      description: Create a category
      parameters:
      - description: Category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a category
      tags:
      - category
  /posts:
    post:
      consumes:
      - application/json
      description: Create a post
      parameters:
      - description: post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Post'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a post
      tags:
      - post
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - default: 10
        in: query
        name: limit
        required: true
        type: integer
      - default: 1
        in: query
        name: page
        required: true
        type: integer
      - in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.GetAllUsersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get all users
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Create a user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Update a user
      tags:
      - user
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ResponseOK'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Delete user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by id
      tags:
      - user
  /users/email/{email}:
    get:
      consumes:
      - application/json
      description: Get user by email
      parameters:
      - description: Email
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Get user by email
      tags:
      - user
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
